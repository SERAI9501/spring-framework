<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 사용자 정의 클래스 메모리 할당 (스프링 관리 요청) 
		 제외 : VO (데이터형으로 사용) , 인터페이스
	-->
	<context:component-scan base-package="com.sist.*"/>
	
	<!-- 
	스프링 역할
	========
	  1) 객체의 생명주기 (클래스 관리자)
	  	 ===========
	  	   객체 생성 / 객체 소멸  = 이 역할을 하는 명칭을 '컨테이너' 자바로 따지면 윈도우 버튼이나 텍스트 만드는 역할
	  	   *** 객체 찾기 = DL 메소드 이름으로는 (getBean())
	  2) 객체 생성시에 변수에 대한 초기화 = DI
	                ============= 생성자로 값을 넣을거냐 세터로 값을 넣을거냐
	                1.setter DI
	                  p:name="홍길동" = seetName("홍길동")
	                2.constructor DI
	                  c:name="홍길동" = A(String name)
	                                  ============== 홍길동
	                3.객체 생성시 = init-method="메소드명"
	                  객체 소멸시 = destory-method="메소드명"
	                  
	  어노테이션으로 바꿔줄때
	  선택적인 클래스 메모리 할당
	@Component = 일반클래스 (~Manager , MainClass)
	@Repository = DAO를 나타내주는 부분 (table한개에 대한 제어)
	@Service = DAO여러개를 한번에 처리할 때 사용
	======== 실무의 대부분이 Service일 것이다.
	========> 게시판
	          댓글
============여기부터는 웹과 관련한 부분==============
	@Controller = Model => 화면 이동과 관련이 있음(sendRedirect/forward)
	@RestController = Model => ajax이용한다고 종종 void사용 할 때 
	                           ==== 자바스크립트 연동할 때 쓰는 것
	                           ====> JSON을 전송하는 것.
	                           단점은 화면이동은 못하고 데이터만 전송한다. 화면이동은 위에 컨트롤러가 해준다
	                  React/Vue안에는 자체에 화면이동하는 방법이 있다. (Router) 를 사용한다.
	@ControllerAdvice = Model에서 발생하는 예외처리
==============여기까지 웹과 관련한 부분======================
	 @Configuration = 클래스 설정 XML을 대체 (자바로 코딩할때 쓴다)
	 
	 MVC
	          request넘김           request받아서 
	   요청(.do) ===> DispatcherServlet ===> Model에서 처리 <==> DAO 
	       JSP <===  DispatcherServlet<=== Model
	                                    | 결과값
	                                      request/session
	                                      requestsetattribute로 값을 더 실어서 보내줌
	                      |
	                 '서블릿이 집중'되는 단점이 있음
	                 DispatcherServlet이 여러명이 있으면 어떨까?
	                 DispatcherServlet 여러개 있는 방식 = 도메인 방식
	 
	 *** 이 4가지는 꼭 외워둘 것
	 DI와 관련되어서 값을 주입을 하는 상태
	 @Autowired = 자동주입 (스프링에서 저장되어있는 객체중에 같은 객체를 찾아서 주입)
	                 주의점 ** 일반 멤버변수는 불가능  /  객체 주소를 전송만 가능
	                                               ======
	          이게 있으면 가능한데 불가능하다? 주소값을 채워주는것이지 변수값을 채워주는것은 아니다. 
	          class A
	          {
	          	@Autowired
	          	private String name; (오류나는 코드)
	          	
	          	private B b; (이런식으로 사용해야 한다)
	          	
	          	
	          }
	          					@Value("")
	          만약 값을 넣고싶다? => private String name="";
	          그럼 Value값은 언제쓰지? @Value("")=> properties => DB
	          
	          class A 필요하다면 객체를 2개를 받을 수 있다.
	          {
	          	@Autowired //클래스 객채당 하나씩 붙여야 들어간다 / 어노테이션은 한개만 제어하기 때문이다.
	          	private B b;
	          	@Autowired // 자동으로 객체 주소를 찾아주는 역할을 함
	          	private C c;
	          }
	          
	 @PostConstruct = init-method 
	 @PreDestroy = distroy-method
	 @Resource = 사용자가 선택하는 것?
	             @Resource(name="클래스 아이디") 이런식으로 사용자가 객체를 선택 하는 것
	             
	 *** @Autowired : 사용시에는 반드시 클래스 메모리 할당이 되어 있어야 한다.
	 class A
	 {
	 	@Autowired
	 	private B b; => 이렇게 하면 null값이 들어간다. 메모리 할당이 안되면 사용이 안된다. class A 를 먼저 생성해야만 한다. 우리가 생성하면 스프링에서 관리를 안해준다.
	 	                스프링이 관리하는 클래스에서만 가능하다.
	 }	
	 => 스프링은 등록 클래스외에는 역할을 수행하지 않는다.             
	 -->
</beans>
